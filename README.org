* What is nomnichi?
  nomnichi is a Nomura Laboratory's blog system developed by Ruby on Rails.

* Setup Ruby and clone nomnichi
  | Ruby  | 2.2.3 |
  | Rails | 4.2.4 |

  I recommend you to install new Ruby and Bundler on the top of Rbenv before install nomnichi.

  1) Install rbenv + ruby-build (check https://github.com/sstephenson/rbenv#basic-github-checkout for details)
     #+BEGIN_SRC sh
       $ git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
       $ git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
       # Edit your shell dot files to add some path and environment variables.
     #+END_SRC

  2) Install Ruby and Bundler
     #+BEGIN_SRC sh
       # Install ruby 2.2.3
       $ rbenv install 2.2.3

       # Installation check
       $ rbenv global 2.2.3
       $ ruby -v # -> You will see: ruby 2.1.5...

       # Install bundler for your new Ruby
       $ gem install bundler

       # Activate bundler
       $ rbenv rehash

       # Get back to your system default Ruby if you want
       $ rbenv global system # say, /usr/bin/ruby
       $ ruby -v
     #+END_SRC

  3) Clone nomnichi from GitHub
     #+BEGIN_SRC sh
       $ git clone git@github.com:nomlab/nomnichi.git ~/Programs/nomnichi
     #+END_SRC

  4) Setup to use installed ruby
     #+BEGIN_SRC sh
       $ cd ~/Programs/nomnichi
       $ rbenv local 2.2.3
       $ ruby -v # -> You will see: ruby 2.2.3...
     #+END_SRC

* Installation of nomnichi for developers
  You can install by invoking bin/install.sh:
  #+BEGIN_SRC sh
       $ bin/install.sh
  #+END_SRC

  Or, you can take these procedures by hand:

  1) Install vendor/bundle stuffs
     #+BEGIN_SRC sh
       $ bundle install --path vendor/bundle
     #+END_SRC

  2) Setup secret key
     #+BEGIN_SRC sh
       $ bundle exec rake secret # -> You will see: foobarbuz... Copy the string.
       $ cp config/secrets.yml.template config/secrets.yml
       $ vim config/secrets.yml # -> Replace all <SECRETKEY> with the string outputted
     #+END_SRC

  3) Setup GitHub OmniAuth
     #+BEGIN_SRC sh
       $ cp config/application_settings.yml.template config/application_settings.yml
       $ vim config/application_settings.yml # -> set client_id, client_secret, allowed_team_id
     #+END_SRC

  4) Setup DB
     #+BEGIN_SRC sh
       $ bundle exec rake db:migrate
       $ bundle exec rake db:migrate RAILS_ENV=production
     #+END_SRC

* Launch nomnichi Rails app
** development
   You can launch server by invoking bin/server.sh:
   #+BEGIN_SRC sh
     # start
     $ bin/server.sh start dev

     # stop
     $ bin/server.sh stop
   #+END_SRC

   Or, you can take these procedures by hand:
   #+BEGIN_SRC sh
     # start
     $ export RAILS_ENV="development"
     $ export RAILS_RELATIVE_URL_ROOT='/lab/nom'
     $ export RAILS_SERVE_STATIC_FILES=true
     $ bundle exec rails server -b 0.0.0.0 -p 3000 -d -e "$RAILS_ENV"
     $ open http://localhost:3000/lab/nom

     # stop
     $ kill $(cat tmp/pids/server.pid)
   #+END_SRC
   You can also

** production
   You can launch server by invoking bin/server.sh:
   #+BEGIN_SRC sh
     # start
     $ bin/server.sh start pro

     # stop
     $ bin/server.sh stop
   #+END_SRC

   Or, you can take these procedures by hand:
   #+BEGIN_SRC sh
     # start
     $ export RAILS_ENV="production"
     $ export RAILS_RELATIVE_URL_ROOT='/lab/nom'
     $ export RAILS_SERVE_STATIC_FILES=true
     $ bundle exec rake assets:precompile RAILS_ENV="$RAILS_ENV"
     $ bundle exec rails server -b 0.0.0.0 -p 54321 -d -e "$RAILS_ENV"
     $ open http://localhost:54321/lab/nom

     # stop
     $ kill $(cat tmp/pids/server.pid)
   #+END_SRC
